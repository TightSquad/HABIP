// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto__INCLUDED
#define PROTOBUF_common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace common {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_common_2eproto();
void protobuf_InitDefaults_common_2eproto();
void protobuf_AssignDesc_common_2eproto();
void protobuf_ShutdownFile_common_2eproto();

class PressureSensor;
class TempSensor;

// ===================================================================

class TempSensor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.TempSensor) */ {
 public:
  TempSensor();
  virtual ~TempSensor();

  TempSensor(const TempSensor& from);

  inline TempSensor& operator=(const TempSensor& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TempSensor& default_instance();

  static const TempSensor* internal_default_instance();

  void Swap(TempSensor* other);

  // implements Message ----------------------------------------------

  inline TempSensor* New() const { return New(NULL); }

  TempSensor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TempSensor& from);
  void MergeFrom(const TempSensor& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TempSensor* other);
  void UnsafeMergeFrom(const TempSensor& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional float value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  float value() const;
  void set_value(float value);

  // @@protoc_insertion_point(class_scope:common.TempSensor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  float value_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_common_2eproto_impl();
  friend void  protobuf_AddDesc_common_2eproto_impl();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TempSensor> TempSensor_default_instance_;

// -------------------------------------------------------------------

class PressureSensor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.PressureSensor) */ {
 public:
  PressureSensor();
  virtual ~PressureSensor();

  PressureSensor(const PressureSensor& from);

  inline PressureSensor& operator=(const PressureSensor& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PressureSensor& default_instance();

  static const PressureSensor* internal_default_instance();

  void Swap(PressureSensor* other);

  // implements Message ----------------------------------------------

  inline PressureSensor* New() const { return New(NULL); }

  PressureSensor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PressureSensor& from);
  void MergeFrom(const PressureSensor& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PressureSensor* other);
  void UnsafeMergeFrom(const PressureSensor& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional float value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  float value() const;
  void set_value(float value);

  // @@protoc_insertion_point(class_scope:common.PressureSensor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  float value_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_common_2eproto_impl();
  friend void  protobuf_AddDesc_common_2eproto_impl();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PressureSensor> PressureSensor_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TempSensor

// optional int32 id = 1;
inline void TempSensor::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 TempSensor::id() const {
  // @@protoc_insertion_point(field_get:common.TempSensor.id)
  return id_;
}
inline void TempSensor::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:common.TempSensor.id)
}

// optional float value = 2;
inline void TempSensor::clear_value() {
  value_ = 0;
}
inline float TempSensor::value() const {
  // @@protoc_insertion_point(field_get:common.TempSensor.value)
  return value_;
}
inline void TempSensor::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:common.TempSensor.value)
}

inline const TempSensor* TempSensor::internal_default_instance() {
  return &TempSensor_default_instance_.get();
}
// -------------------------------------------------------------------

// PressureSensor

// optional int32 id = 1;
inline void PressureSensor::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 PressureSensor::id() const {
  // @@protoc_insertion_point(field_get:common.PressureSensor.id)
  return id_;
}
inline void PressureSensor::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:common.PressureSensor.id)
}

// optional float value = 2;
inline void PressureSensor::clear_value() {
  value_ = 0;
}
inline float PressureSensor::value() const {
  // @@protoc_insertion_point(field_get:common.PressureSensor.value)
  return value_;
}
inline void PressureSensor::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:common.PressureSensor.value)
}

inline const PressureSensor* PressureSensor::internal_default_instance() {
  return &PressureSensor_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto__INCLUDED
