/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: comms_pi.proto */

#ifndef PROTOBUF_C_comms_5fpi_2eproto__INCLUDED
#define PROTOBUF_C_comms_5fpi_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "common.pb-c.h"
#include "daqcs_msp.pb-c.h"

typedef struct _CommsPi__Data CommsPi__Data;
typedef struct _CommsPi__GPS CommsPi__GPS;
typedef struct _CommsPi__Coordinate CommsPi__Coordinate;


/* --- enums --- */


/* --- messages --- */

struct  _CommsPi__Data
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  int32_t id;
  DaqcsMsp__Data *msp;
  Common__TempSensor *commstemp;
  Common__PressureSensor *commspressure;
  CommsPi__GPS *gpssensor;
  CommsPi__GPS *aprs;
};
#define COMMS_PI__DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&comms_pi__data__descriptor) \
    , 0,0, NULL, NULL, NULL, NULL, NULL }


struct  _CommsPi__GPS
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  int32_t id;
  CommsPi__Coordinate *north;
  CommsPi__Coordinate *west;
  protobuf_c_boolean has_elevation;
  float elevation;
};
#define COMMS_PI__GPS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&comms_pi__gps__descriptor) \
    , 0,0, NULL, NULL, 0,0 }


struct  _CommsPi__Coordinate
{
  ProtobufCMessage base;
  protobuf_c_boolean has_degrees;
  float degrees;
  protobuf_c_boolean has_minutes;
  float minutes;
};
#define COMMS_PI__COORDINATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&comms_pi__coordinate__descriptor) \
    , 0,0, 0,0 }


/* CommsPi__Data methods */
void   comms_pi__data__init
                     (CommsPi__Data         *message);
size_t comms_pi__data__get_packed_size
                     (const CommsPi__Data   *message);
size_t comms_pi__data__pack
                     (const CommsPi__Data   *message,
                      uint8_t             *out);
size_t comms_pi__data__pack_to_buffer
                     (const CommsPi__Data   *message,
                      ProtobufCBuffer     *buffer);
CommsPi__Data *
       comms_pi__data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   comms_pi__data__free_unpacked
                     (CommsPi__Data *message,
                      ProtobufCAllocator *allocator);
/* CommsPi__GPS methods */
void   comms_pi__gps__init
                     (CommsPi__GPS         *message);
size_t comms_pi__gps__get_packed_size
                     (const CommsPi__GPS   *message);
size_t comms_pi__gps__pack
                     (const CommsPi__GPS   *message,
                      uint8_t             *out);
size_t comms_pi__gps__pack_to_buffer
                     (const CommsPi__GPS   *message,
                      ProtobufCBuffer     *buffer);
CommsPi__GPS *
       comms_pi__gps__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   comms_pi__gps__free_unpacked
                     (CommsPi__GPS *message,
                      ProtobufCAllocator *allocator);
/* CommsPi__Coordinate methods */
void   comms_pi__coordinate__init
                     (CommsPi__Coordinate         *message);
size_t comms_pi__coordinate__get_packed_size
                     (const CommsPi__Coordinate   *message);
size_t comms_pi__coordinate__pack
                     (const CommsPi__Coordinate   *message,
                      uint8_t             *out);
size_t comms_pi__coordinate__pack_to_buffer
                     (const CommsPi__Coordinate   *message,
                      ProtobufCBuffer     *buffer);
CommsPi__Coordinate *
       comms_pi__coordinate__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   comms_pi__coordinate__free_unpacked
                     (CommsPi__Coordinate *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CommsPi__Data_Closure)
                 (const CommsPi__Data *message,
                  void *closure_data);
typedef void (*CommsPi__GPS_Closure)
                 (const CommsPi__GPS *message,
                  void *closure_data);
typedef void (*CommsPi__Coordinate_Closure)
                 (const CommsPi__Coordinate *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor comms_pi__data__descriptor;
extern const ProtobufCMessageDescriptor comms_pi__gps__descriptor;
extern const ProtobufCMessageDescriptor comms_pi__coordinate__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_comms_5fpi_2eproto__INCLUDED */
