// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comms_pi.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "comms_pi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace comms_pi {

namespace {

const ::google::protobuf::Descriptor* Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* GPS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPS_reflection_ = NULL;
const ::google::protobuf::Descriptor* Coordinate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Coordinate_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_comms_5fpi_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_comms_5fpi_2eproto() {
  protobuf_AddDesc_comms_5fpi_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "comms_pi.proto");
  GOOGLE_CHECK(file != NULL);
  Data_descriptor_ = file->message_type(0);
  static const int Data_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, msp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, commstemp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, commspressure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, gpssensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, aprs_),
  };
  Data_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Data_descriptor_,
      Data::internal_default_instance(),
      Data_offsets_,
      -1,
      -1,
      -1,
      sizeof(Data),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _internal_metadata_));
  GPS_descriptor_ = file->message_type(1);
  static const int GPS_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPS, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPS, north_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPS, west_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPS, elevation_),
  };
  GPS_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GPS_descriptor_,
      GPS::internal_default_instance(),
      GPS_offsets_,
      -1,
      -1,
      -1,
      sizeof(GPS),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPS, _internal_metadata_));
  Coordinate_descriptor_ = file->message_type(2);
  static const int Coordinate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, degrees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, minutes_),
  };
  Coordinate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Coordinate_descriptor_,
      Coordinate::internal_default_instance(),
      Coordinate_offsets_,
      -1,
      -1,
      -1,
      sizeof(Coordinate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_comms_5fpi_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Data_descriptor_, Data::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GPS_descriptor_, GPS::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Coordinate_descriptor_, Coordinate::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_comms_5fpi_2eproto() {
  Data_default_instance_.Shutdown();
  delete Data_reflection_;
  GPS_default_instance_.Shutdown();
  delete GPS_reflection_;
  Coordinate_default_instance_.Shutdown();
  delete Coordinate_reflection_;
}

void protobuf_InitDefaults_comms_5fpi_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::protobuf_InitDefaults_common_2eproto();
  ::daqcs_msp::protobuf_InitDefaults_daqcs_5fmsp_2eproto();
  Data_default_instance_.DefaultConstruct();
  GPS_default_instance_.DefaultConstruct();
  Coordinate_default_instance_.DefaultConstruct();
  Data_default_instance_.get_mutable()->InitAsDefaultInstance();
  GPS_default_instance_.get_mutable()->InitAsDefaultInstance();
  Coordinate_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_comms_5fpi_2eproto_once_);
void protobuf_InitDefaults_comms_5fpi_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_comms_5fpi_2eproto_once_,
                 &protobuf_InitDefaults_comms_5fpi_2eproto_impl);
}
void protobuf_AddDesc_comms_5fpi_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_comms_5fpi_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016comms_pi.proto\022\010comms_pi\032\014common.proto"
    "\032\017daqcs_msp.proto\"\305\001\n\004Data\022\n\n\002id\030\001 \001(\005\022\034"
    "\n\003msp\030\002 \001(\0132\017.daqcs_msp.Data\022%\n\tcommsTem"
    "p\030\003 \001(\0132\022.common.TempSensor\022-\n\rcommsPres"
    "sure\030\004 \001(\0132\026.common.PressureSensor\022 \n\tgp"
    "sSensor\030\005 \001(\0132\r.comms_pi.GPS\022\033\n\004aprs\030\006 \001"
    "(\0132\r.comms_pi.GPS\"m\n\003GPS\022\n\n\002id\030\001 \001(\005\022#\n\005"
    "north\030\002 \001(\0132\024.comms_pi.Coordinate\022\"\n\004wes"
    "t\030\003 \001(\0132\024.comms_pi.Coordinate\022\021\n\televati"
    "on\030\004 \001(\002\".\n\nCoordinate\022\017\n\007degrees\030\001 \001(\002\022"
    "\017\n\007minutes\030\002 \001(\002b\006proto3", 424);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "comms_pi.proto", &protobuf_RegisterTypes);
  ::common::protobuf_AddDesc_common_2eproto();
  ::daqcs_msp::protobuf_AddDesc_daqcs_5fmsp_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_comms_5fpi_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_comms_5fpi_2eproto_once_);
void protobuf_AddDesc_comms_5fpi_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_comms_5fpi_2eproto_once_,
                 &protobuf_AddDesc_comms_5fpi_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_comms_5fpi_2eproto {
  StaticDescriptorInitializer_comms_5fpi_2eproto() {
    protobuf_AddDesc_comms_5fpi_2eproto();
  }
} static_descriptor_initializer_comms_5fpi_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Data::kIdFieldNumber;
const int Data::kMspFieldNumber;
const int Data::kCommsTempFieldNumber;
const int Data::kCommsPressureFieldNumber;
const int Data::kGpsSensorFieldNumber;
const int Data::kAprsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Data::Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_comms_5fpi_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:comms_pi.Data)
}

void Data::InitAsDefaultInstance() {
  msp_ = const_cast< ::daqcs_msp::Data*>(
      ::daqcs_msp::Data::internal_default_instance());
  commstemp_ = const_cast< ::common::TempSensor*>(
      ::common::TempSensor::internal_default_instance());
  commspressure_ = const_cast< ::common::PressureSensor*>(
      ::common::PressureSensor::internal_default_instance());
  gpssensor_ = const_cast< ::comms_pi::GPS*>(
      ::comms_pi::GPS::internal_default_instance());
  aprs_ = const_cast< ::comms_pi::GPS*>(
      ::comms_pi::GPS::internal_default_instance());
}

Data::Data(const Data& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comms_pi.Data)
}

void Data::SharedCtor() {
  msp_ = NULL;
  commstemp_ = NULL;
  commspressure_ = NULL;
  gpssensor_ = NULL;
  aprs_ = NULL;
  id_ = 0;
  _cached_size_ = 0;
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:comms_pi.Data)
  SharedDtor();
}

void Data::SharedDtor() {
  if (this != &Data_default_instance_.get()) {
    delete msp_;
    delete commstemp_;
    delete commspressure_;
    delete gpssensor_;
    delete aprs_;
  }
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_descriptor_;
}

const Data& Data::default_instance() {
  protobuf_InitDefaults_comms_5fpi_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Data> Data_default_instance_;

Data* Data::New(::google::protobuf::Arena* arena) const {
  Data* n = new Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:comms_pi.Data)
  id_ = 0;
  if (GetArenaNoVirtual() == NULL && msp_ != NULL) delete msp_;
  msp_ = NULL;
  if (GetArenaNoVirtual() == NULL && commstemp_ != NULL) delete commstemp_;
  commstemp_ = NULL;
  if (GetArenaNoVirtual() == NULL && commspressure_ != NULL) delete commspressure_;
  commspressure_ = NULL;
  if (GetArenaNoVirtual() == NULL && gpssensor_ != NULL) delete gpssensor_;
  gpssensor_ = NULL;
  if (GetArenaNoVirtual() == NULL && aprs_ != NULL) delete aprs_;
  aprs_ = NULL;
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comms_pi.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msp;
        break;
      }

      // optional .daqcs_msp.Data msp = 2;
      case 2: {
        if (tag == 18) {
         parse_msp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_commsTemp;
        break;
      }

      // optional .common.TempSensor commsTemp = 3;
      case 3: {
        if (tag == 26) {
         parse_commsTemp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commstemp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_commsPressure;
        break;
      }

      // optional .common.PressureSensor commsPressure = 4;
      case 4: {
        if (tag == 34) {
         parse_commsPressure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commspressure()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_gpsSensor;
        break;
      }

      // optional .comms_pi.GPS gpsSensor = 5;
      case 5: {
        if (tag == 42) {
         parse_gpsSensor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gpssensor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_aprs;
        break;
      }

      // optional .comms_pi.GPS aprs = 6;
      case 6: {
        if (tag == 50) {
         parse_aprs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aprs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comms_pi.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comms_pi.Data)
  return false;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comms_pi.Data)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .daqcs_msp.Data msp = 2;
  if (this->has_msp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->msp_, output);
  }

  // optional .common.TempSensor commsTemp = 3;
  if (this->has_commstemp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->commstemp_, output);
  }

  // optional .common.PressureSensor commsPressure = 4;
  if (this->has_commspressure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->commspressure_, output);
  }

  // optional .comms_pi.GPS gpsSensor = 5;
  if (this->has_gpssensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->gpssensor_, output);
  }

  // optional .comms_pi.GPS aprs = 6;
  if (this->has_aprs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->aprs_, output);
  }

  // @@protoc_insertion_point(serialize_end:comms_pi.Data)
}

::google::protobuf::uint8* Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:comms_pi.Data)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .daqcs_msp.Data msp = 2;
  if (this->has_msp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->msp_, false, target);
  }

  // optional .common.TempSensor commsTemp = 3;
  if (this->has_commstemp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->commstemp_, false, target);
  }

  // optional .common.PressureSensor commsPressure = 4;
  if (this->has_commspressure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->commspressure_, false, target);
  }

  // optional .comms_pi.GPS gpsSensor = 5;
  if (this->has_gpssensor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->gpssensor_, false, target);
  }

  // optional .comms_pi.GPS aprs = 6;
  if (this->has_aprs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->aprs_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:comms_pi.Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comms_pi.Data)
  size_t total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional .daqcs_msp.Data msp = 2;
  if (this->has_msp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msp_);
  }

  // optional .common.TempSensor commsTemp = 3;
  if (this->has_commstemp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->commstemp_);
  }

  // optional .common.PressureSensor commsPressure = 4;
  if (this->has_commspressure()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->commspressure_);
  }

  // optional .comms_pi.GPS gpsSensor = 5;
  if (this->has_gpssensor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gpssensor_);
  }

  // optional .comms_pi.GPS aprs = 6;
  if (this->has_aprs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->aprs_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comms_pi.Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comms_pi.Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comms_pi.Data)
    UnsafeMergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comms_pi.Data)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Data::UnsafeMergeFrom(const Data& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_msp()) {
    mutable_msp()->::daqcs_msp::Data::MergeFrom(from.msp());
  }
  if (from.has_commstemp()) {
    mutable_commstemp()->::common::TempSensor::MergeFrom(from.commstemp());
  }
  if (from.has_commspressure()) {
    mutable_commspressure()->::common::PressureSensor::MergeFrom(from.commspressure());
  }
  if (from.has_gpssensor()) {
    mutable_gpssensor()->::comms_pi::GPS::MergeFrom(from.gpssensor());
  }
  if (from.has_aprs()) {
    mutable_aprs()->::comms_pi::GPS::MergeFrom(from.aprs());
  }
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comms_pi.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comms_pi.Data)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Data::IsInitialized() const {

  return true;
}

void Data::Swap(Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Data::InternalSwap(Data* other) {
  std::swap(id_, other->id_);
  std::swap(msp_, other->msp_);
  std::swap(commstemp_, other->commstemp_);
  std::swap(commspressure_, other->commspressure_);
  std::swap(gpssensor_, other->gpssensor_);
  std::swap(aprs_, other->aprs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Data_descriptor_;
  metadata.reflection = Data_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Data

// optional int32 id = 1;
void Data::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 Data::id() const {
  // @@protoc_insertion_point(field_get:comms_pi.Data.id)
  return id_;
}
void Data::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:comms_pi.Data.id)
}

// optional .daqcs_msp.Data msp = 2;
bool Data::has_msp() const {
  return this != internal_default_instance() && msp_ != NULL;
}
void Data::clear_msp() {
  if (GetArenaNoVirtual() == NULL && msp_ != NULL) delete msp_;
  msp_ = NULL;
}
const ::daqcs_msp::Data& Data::msp() const {
  // @@protoc_insertion_point(field_get:comms_pi.Data.msp)
  return msp_ != NULL ? *msp_
                         : *::daqcs_msp::Data::internal_default_instance();
}
::daqcs_msp::Data* Data::mutable_msp() {
  
  if (msp_ == NULL) {
    msp_ = new ::daqcs_msp::Data;
  }
  // @@protoc_insertion_point(field_mutable:comms_pi.Data.msp)
  return msp_;
}
::daqcs_msp::Data* Data::release_msp() {
  // @@protoc_insertion_point(field_release:comms_pi.Data.msp)
  
  ::daqcs_msp::Data* temp = msp_;
  msp_ = NULL;
  return temp;
}
void Data::set_allocated_msp(::daqcs_msp::Data* msp) {
  delete msp_;
  msp_ = msp;
  if (msp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:comms_pi.Data.msp)
}

// optional .common.TempSensor commsTemp = 3;
bool Data::has_commstemp() const {
  return this != internal_default_instance() && commstemp_ != NULL;
}
void Data::clear_commstemp() {
  if (GetArenaNoVirtual() == NULL && commstemp_ != NULL) delete commstemp_;
  commstemp_ = NULL;
}
const ::common::TempSensor& Data::commstemp() const {
  // @@protoc_insertion_point(field_get:comms_pi.Data.commsTemp)
  return commstemp_ != NULL ? *commstemp_
                         : *::common::TempSensor::internal_default_instance();
}
::common::TempSensor* Data::mutable_commstemp() {
  
  if (commstemp_ == NULL) {
    commstemp_ = new ::common::TempSensor;
  }
  // @@protoc_insertion_point(field_mutable:comms_pi.Data.commsTemp)
  return commstemp_;
}
::common::TempSensor* Data::release_commstemp() {
  // @@protoc_insertion_point(field_release:comms_pi.Data.commsTemp)
  
  ::common::TempSensor* temp = commstemp_;
  commstemp_ = NULL;
  return temp;
}
void Data::set_allocated_commstemp(::common::TempSensor* commstemp) {
  delete commstemp_;
  commstemp_ = commstemp;
  if (commstemp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:comms_pi.Data.commsTemp)
}

// optional .common.PressureSensor commsPressure = 4;
bool Data::has_commspressure() const {
  return this != internal_default_instance() && commspressure_ != NULL;
}
void Data::clear_commspressure() {
  if (GetArenaNoVirtual() == NULL && commspressure_ != NULL) delete commspressure_;
  commspressure_ = NULL;
}
const ::common::PressureSensor& Data::commspressure() const {
  // @@protoc_insertion_point(field_get:comms_pi.Data.commsPressure)
  return commspressure_ != NULL ? *commspressure_
                         : *::common::PressureSensor::internal_default_instance();
}
::common::PressureSensor* Data::mutable_commspressure() {
  
  if (commspressure_ == NULL) {
    commspressure_ = new ::common::PressureSensor;
  }
  // @@protoc_insertion_point(field_mutable:comms_pi.Data.commsPressure)
  return commspressure_;
}
::common::PressureSensor* Data::release_commspressure() {
  // @@protoc_insertion_point(field_release:comms_pi.Data.commsPressure)
  
  ::common::PressureSensor* temp = commspressure_;
  commspressure_ = NULL;
  return temp;
}
void Data::set_allocated_commspressure(::common::PressureSensor* commspressure) {
  delete commspressure_;
  commspressure_ = commspressure;
  if (commspressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:comms_pi.Data.commsPressure)
}

// optional .comms_pi.GPS gpsSensor = 5;
bool Data::has_gpssensor() const {
  return this != internal_default_instance() && gpssensor_ != NULL;
}
void Data::clear_gpssensor() {
  if (GetArenaNoVirtual() == NULL && gpssensor_ != NULL) delete gpssensor_;
  gpssensor_ = NULL;
}
const ::comms_pi::GPS& Data::gpssensor() const {
  // @@protoc_insertion_point(field_get:comms_pi.Data.gpsSensor)
  return gpssensor_ != NULL ? *gpssensor_
                         : *::comms_pi::GPS::internal_default_instance();
}
::comms_pi::GPS* Data::mutable_gpssensor() {
  
  if (gpssensor_ == NULL) {
    gpssensor_ = new ::comms_pi::GPS;
  }
  // @@protoc_insertion_point(field_mutable:comms_pi.Data.gpsSensor)
  return gpssensor_;
}
::comms_pi::GPS* Data::release_gpssensor() {
  // @@protoc_insertion_point(field_release:comms_pi.Data.gpsSensor)
  
  ::comms_pi::GPS* temp = gpssensor_;
  gpssensor_ = NULL;
  return temp;
}
void Data::set_allocated_gpssensor(::comms_pi::GPS* gpssensor) {
  delete gpssensor_;
  gpssensor_ = gpssensor;
  if (gpssensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:comms_pi.Data.gpsSensor)
}

// optional .comms_pi.GPS aprs = 6;
bool Data::has_aprs() const {
  return this != internal_default_instance() && aprs_ != NULL;
}
void Data::clear_aprs() {
  if (GetArenaNoVirtual() == NULL && aprs_ != NULL) delete aprs_;
  aprs_ = NULL;
}
const ::comms_pi::GPS& Data::aprs() const {
  // @@protoc_insertion_point(field_get:comms_pi.Data.aprs)
  return aprs_ != NULL ? *aprs_
                         : *::comms_pi::GPS::internal_default_instance();
}
::comms_pi::GPS* Data::mutable_aprs() {
  
  if (aprs_ == NULL) {
    aprs_ = new ::comms_pi::GPS;
  }
  // @@protoc_insertion_point(field_mutable:comms_pi.Data.aprs)
  return aprs_;
}
::comms_pi::GPS* Data::release_aprs() {
  // @@protoc_insertion_point(field_release:comms_pi.Data.aprs)
  
  ::comms_pi::GPS* temp = aprs_;
  aprs_ = NULL;
  return temp;
}
void Data::set_allocated_aprs(::comms_pi::GPS* aprs) {
  delete aprs_;
  aprs_ = aprs;
  if (aprs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:comms_pi.Data.aprs)
}

inline const Data* Data::internal_default_instance() {
  return &Data_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GPS::kIdFieldNumber;
const int GPS::kNorthFieldNumber;
const int GPS::kWestFieldNumber;
const int GPS::kElevationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GPS::GPS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_comms_5fpi_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:comms_pi.GPS)
}

void GPS::InitAsDefaultInstance() {
  north_ = const_cast< ::comms_pi::Coordinate*>(
      ::comms_pi::Coordinate::internal_default_instance());
  west_ = const_cast< ::comms_pi::Coordinate*>(
      ::comms_pi::Coordinate::internal_default_instance());
}

GPS::GPS(const GPS& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comms_pi.GPS)
}

void GPS::SharedCtor() {
  north_ = NULL;
  west_ = NULL;
  ::memset(&id_, 0, reinterpret_cast<char*>(&elevation_) -
    reinterpret_cast<char*>(&id_) + sizeof(elevation_));
  _cached_size_ = 0;
}

GPS::~GPS() {
  // @@protoc_insertion_point(destructor:comms_pi.GPS)
  SharedDtor();
}

void GPS::SharedDtor() {
  if (this != &GPS_default_instance_.get()) {
    delete north_;
    delete west_;
  }
}

void GPS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPS_descriptor_;
}

const GPS& GPS::default_instance() {
  protobuf_InitDefaults_comms_5fpi_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GPS> GPS_default_instance_;

GPS* GPS::New(::google::protobuf::Arena* arena) const {
  GPS* n = new GPS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GPS::Clear() {
// @@protoc_insertion_point(message_clear_start:comms_pi.GPS)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GPS, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GPS*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, elevation_);
  if (GetArenaNoVirtual() == NULL && north_ != NULL) delete north_;
  north_ = NULL;
  if (GetArenaNoVirtual() == NULL && west_ != NULL) delete west_;
  west_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool GPS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comms_pi.GPS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_north;
        break;
      }

      // optional .comms_pi.Coordinate north = 2;
      case 2: {
        if (tag == 18) {
         parse_north:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_north()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_west;
        break;
      }

      // optional .comms_pi.Coordinate west = 3;
      case 3: {
        if (tag == 26) {
         parse_west:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_west()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_elevation;
        break;
      }

      // optional float elevation = 4;
      case 4: {
        if (tag == 37) {
         parse_elevation:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &elevation_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comms_pi.GPS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comms_pi.GPS)
  return false;
#undef DO_
}

void GPS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comms_pi.GPS)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .comms_pi.Coordinate north = 2;
  if (this->has_north()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->north_, output);
  }

  // optional .comms_pi.Coordinate west = 3;
  if (this->has_west()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->west_, output);
  }

  // optional float elevation = 4;
  if (this->elevation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->elevation(), output);
  }

  // @@protoc_insertion_point(serialize_end:comms_pi.GPS)
}

::google::protobuf::uint8* GPS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:comms_pi.GPS)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .comms_pi.Coordinate north = 2;
  if (this->has_north()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->north_, false, target);
  }

  // optional .comms_pi.Coordinate west = 3;
  if (this->has_west()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->west_, false, target);
  }

  // optional float elevation = 4;
  if (this->elevation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->elevation(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:comms_pi.GPS)
  return target;
}

size_t GPS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comms_pi.GPS)
  size_t total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional .comms_pi.Coordinate north = 2;
  if (this->has_north()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->north_);
  }

  // optional .comms_pi.Coordinate west = 3;
  if (this->has_west()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->west_);
  }

  // optional float elevation = 4;
  if (this->elevation() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comms_pi.GPS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GPS* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GPS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comms_pi.GPS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comms_pi.GPS)
    UnsafeMergeFrom(*source);
  }
}

void GPS::MergeFrom(const GPS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comms_pi.GPS)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GPS::UnsafeMergeFrom(const GPS& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_north()) {
    mutable_north()->::comms_pi::Coordinate::MergeFrom(from.north());
  }
  if (from.has_west()) {
    mutable_west()->::comms_pi::Coordinate::MergeFrom(from.west());
  }
  if (from.elevation() != 0) {
    set_elevation(from.elevation());
  }
}

void GPS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comms_pi.GPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPS::CopyFrom(const GPS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comms_pi.GPS)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GPS::IsInitialized() const {

  return true;
}

void GPS::Swap(GPS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GPS::InternalSwap(GPS* other) {
  std::swap(id_, other->id_);
  std::swap(north_, other->north_);
  std::swap(west_, other->west_);
  std::swap(elevation_, other->elevation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GPS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPS_descriptor_;
  metadata.reflection = GPS_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GPS

// optional int32 id = 1;
void GPS::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 GPS::id() const {
  // @@protoc_insertion_point(field_get:comms_pi.GPS.id)
  return id_;
}
void GPS::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:comms_pi.GPS.id)
}

// optional .comms_pi.Coordinate north = 2;
bool GPS::has_north() const {
  return this != internal_default_instance() && north_ != NULL;
}
void GPS::clear_north() {
  if (GetArenaNoVirtual() == NULL && north_ != NULL) delete north_;
  north_ = NULL;
}
const ::comms_pi::Coordinate& GPS::north() const {
  // @@protoc_insertion_point(field_get:comms_pi.GPS.north)
  return north_ != NULL ? *north_
                         : *::comms_pi::Coordinate::internal_default_instance();
}
::comms_pi::Coordinate* GPS::mutable_north() {
  
  if (north_ == NULL) {
    north_ = new ::comms_pi::Coordinate;
  }
  // @@protoc_insertion_point(field_mutable:comms_pi.GPS.north)
  return north_;
}
::comms_pi::Coordinate* GPS::release_north() {
  // @@protoc_insertion_point(field_release:comms_pi.GPS.north)
  
  ::comms_pi::Coordinate* temp = north_;
  north_ = NULL;
  return temp;
}
void GPS::set_allocated_north(::comms_pi::Coordinate* north) {
  delete north_;
  north_ = north;
  if (north) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:comms_pi.GPS.north)
}

// optional .comms_pi.Coordinate west = 3;
bool GPS::has_west() const {
  return this != internal_default_instance() && west_ != NULL;
}
void GPS::clear_west() {
  if (GetArenaNoVirtual() == NULL && west_ != NULL) delete west_;
  west_ = NULL;
}
const ::comms_pi::Coordinate& GPS::west() const {
  // @@protoc_insertion_point(field_get:comms_pi.GPS.west)
  return west_ != NULL ? *west_
                         : *::comms_pi::Coordinate::internal_default_instance();
}
::comms_pi::Coordinate* GPS::mutable_west() {
  
  if (west_ == NULL) {
    west_ = new ::comms_pi::Coordinate;
  }
  // @@protoc_insertion_point(field_mutable:comms_pi.GPS.west)
  return west_;
}
::comms_pi::Coordinate* GPS::release_west() {
  // @@protoc_insertion_point(field_release:comms_pi.GPS.west)
  
  ::comms_pi::Coordinate* temp = west_;
  west_ = NULL;
  return temp;
}
void GPS::set_allocated_west(::comms_pi::Coordinate* west) {
  delete west_;
  west_ = west;
  if (west) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:comms_pi.GPS.west)
}

// optional float elevation = 4;
void GPS::clear_elevation() {
  elevation_ = 0;
}
float GPS::elevation() const {
  // @@protoc_insertion_point(field_get:comms_pi.GPS.elevation)
  return elevation_;
}
void GPS::set_elevation(float value) {
  
  elevation_ = value;
  // @@protoc_insertion_point(field_set:comms_pi.GPS.elevation)
}

inline const GPS* GPS::internal_default_instance() {
  return &GPS_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Coordinate::kDegreesFieldNumber;
const int Coordinate::kMinutesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Coordinate::Coordinate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_comms_5fpi_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:comms_pi.Coordinate)
}

void Coordinate::InitAsDefaultInstance() {
}

Coordinate::Coordinate(const Coordinate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comms_pi.Coordinate)
}

void Coordinate::SharedCtor() {
  ::memset(&degrees_, 0, reinterpret_cast<char*>(&minutes_) -
    reinterpret_cast<char*>(&degrees_) + sizeof(minutes_));
  _cached_size_ = 0;
}

Coordinate::~Coordinate() {
  // @@protoc_insertion_point(destructor:comms_pi.Coordinate)
  SharedDtor();
}

void Coordinate::SharedDtor() {
}

void Coordinate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Coordinate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Coordinate_descriptor_;
}

const Coordinate& Coordinate::default_instance() {
  protobuf_InitDefaults_comms_5fpi_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Coordinate> Coordinate_default_instance_;

Coordinate* Coordinate::New(::google::protobuf::Arena* arena) const {
  Coordinate* n = new Coordinate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Coordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:comms_pi.Coordinate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Coordinate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Coordinate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(degrees_, minutes_);

#undef ZR_HELPER_
#undef ZR_

}

bool Coordinate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comms_pi.Coordinate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float degrees = 1;
      case 1: {
        if (tag == 13) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &degrees_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_minutes;
        break;
      }

      // optional float minutes = 2;
      case 2: {
        if (tag == 21) {
         parse_minutes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minutes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comms_pi.Coordinate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comms_pi.Coordinate)
  return false;
#undef DO_
}

void Coordinate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comms_pi.Coordinate)
  // optional float degrees = 1;
  if (this->degrees() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->degrees(), output);
  }

  // optional float minutes = 2;
  if (this->minutes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->minutes(), output);
  }

  // @@protoc_insertion_point(serialize_end:comms_pi.Coordinate)
}

::google::protobuf::uint8* Coordinate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:comms_pi.Coordinate)
  // optional float degrees = 1;
  if (this->degrees() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->degrees(), target);
  }

  // optional float minutes = 2;
  if (this->minutes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->minutes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:comms_pi.Coordinate)
  return target;
}

size_t Coordinate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comms_pi.Coordinate)
  size_t total_size = 0;

  // optional float degrees = 1;
  if (this->degrees() != 0) {
    total_size += 1 + 4;
  }

  // optional float minutes = 2;
  if (this->minutes() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Coordinate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comms_pi.Coordinate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Coordinate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Coordinate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comms_pi.Coordinate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comms_pi.Coordinate)
    UnsafeMergeFrom(*source);
  }
}

void Coordinate::MergeFrom(const Coordinate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comms_pi.Coordinate)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Coordinate::UnsafeMergeFrom(const Coordinate& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.degrees() != 0) {
    set_degrees(from.degrees());
  }
  if (from.minutes() != 0) {
    set_minutes(from.minutes());
  }
}

void Coordinate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comms_pi.Coordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coordinate::CopyFrom(const Coordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comms_pi.Coordinate)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Coordinate::IsInitialized() const {

  return true;
}

void Coordinate::Swap(Coordinate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Coordinate::InternalSwap(Coordinate* other) {
  std::swap(degrees_, other->degrees_);
  std::swap(minutes_, other->minutes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Coordinate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Coordinate_descriptor_;
  metadata.reflection = Coordinate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Coordinate

// optional float degrees = 1;
void Coordinate::clear_degrees() {
  degrees_ = 0;
}
float Coordinate::degrees() const {
  // @@protoc_insertion_point(field_get:comms_pi.Coordinate.degrees)
  return degrees_;
}
void Coordinate::set_degrees(float value) {
  
  degrees_ = value;
  // @@protoc_insertion_point(field_set:comms_pi.Coordinate.degrees)
}

// optional float minutes = 2;
void Coordinate::clear_minutes() {
  minutes_ = 0;
}
float Coordinate::minutes() const {
  // @@protoc_insertion_point(field_get:comms_pi.Coordinate.minutes)
  return minutes_;
}
void Coordinate::set_minutes(float value) {
  
  minutes_ = value;
  // @@protoc_insertion_point(field_set:comms_pi.Coordinate.minutes)
}

inline const Coordinate* Coordinate::internal_default_instance() {
  return &Coordinate_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace comms_pi

// @@protoc_insertion_point(global_scope)
