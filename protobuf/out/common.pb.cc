// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace common {

namespace {

const ::google::protobuf::Descriptor* TempSensor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TempSensor_reflection_ = NULL;
const ::google::protobuf::Descriptor* PressureSensor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PressureSensor_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_common_2eproto() {
  protobuf_AddDesc_common_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common.proto");
  GOOGLE_CHECK(file != NULL);
  TempSensor_descriptor_ = file->message_type(0);
  static const int TempSensor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempSensor, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempSensor, value_),
  };
  TempSensor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TempSensor_descriptor_,
      TempSensor::internal_default_instance(),
      TempSensor_offsets_,
      -1,
      -1,
      -1,
      sizeof(TempSensor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempSensor, _internal_metadata_));
  PressureSensor_descriptor_ = file->message_type(1);
  static const int PressureSensor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PressureSensor, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PressureSensor, value_),
  };
  PressureSensor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PressureSensor_descriptor_,
      PressureSensor::internal_default_instance(),
      PressureSensor_offsets_,
      -1,
      -1,
      -1,
      sizeof(PressureSensor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PressureSensor, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TempSensor_descriptor_, TempSensor::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PressureSensor_descriptor_, PressureSensor::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2eproto() {
  TempSensor_default_instance_.Shutdown();
  delete TempSensor_reflection_;
  PressureSensor_default_instance_.Shutdown();
  delete PressureSensor_reflection_;
}

void protobuf_InitDefaults_common_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  TempSensor_default_instance_.DefaultConstruct();
  PressureSensor_default_instance_.DefaultConstruct();
  TempSensor_default_instance_.get_mutable()->InitAsDefaultInstance();
  PressureSensor_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_common_2eproto_once_);
void protobuf_InitDefaults_common_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_common_2eproto_once_,
                 &protobuf_InitDefaults_common_2eproto_impl);
}
void protobuf_AddDesc_common_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014common.proto\022\006common\"\'\n\nTempSensor\022\n\n\002"
    "id\030\001 \001(\005\022\r\n\005value\030\002 \001(\002\"+\n\016PressureSenso"
    "r\022\n\n\002id\030\001 \001(\005\022\r\n\005value\030\002 \001(\002b\006proto3", 116);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_common_2eproto_once_);
void protobuf_AddDesc_common_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_common_2eproto_once_,
                 &protobuf_AddDesc_common_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2eproto {
  StaticDescriptorInitializer_common_2eproto() {
    protobuf_AddDesc_common_2eproto();
  }
} static_descriptor_initializer_common_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TempSensor::kIdFieldNumber;
const int TempSensor::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TempSensor::TempSensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_common_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.TempSensor)
}

void TempSensor::InitAsDefaultInstance() {
}

TempSensor::TempSensor(const TempSensor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.TempSensor)
}

void TempSensor::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&id_) + sizeof(value_));
  _cached_size_ = 0;
}

TempSensor::~TempSensor() {
  // @@protoc_insertion_point(destructor:common.TempSensor)
  SharedDtor();
}

void TempSensor::SharedDtor() {
}

void TempSensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TempSensor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TempSensor_descriptor_;
}

const TempSensor& TempSensor::default_instance() {
  protobuf_InitDefaults_common_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TempSensor> TempSensor_default_instance_;

TempSensor* TempSensor::New(::google::protobuf::Arena* arena) const {
  TempSensor* n = new TempSensor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TempSensor::Clear() {
// @@protoc_insertion_point(message_clear_start:common.TempSensor)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TempSensor, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TempSensor*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, value_);

#undef ZR_HELPER_
#undef ZR_

}

bool TempSensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.TempSensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_value;
        break;
      }

      // optional float value = 2;
      case 2: {
        if (tag == 21) {
         parse_value:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.TempSensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.TempSensor)
  return false;
#undef DO_
}

void TempSensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.TempSensor)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional float value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:common.TempSensor)
}

::google::protobuf::uint8* TempSensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:common.TempSensor)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional float value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:common.TempSensor)
  return target;
}

size_t TempSensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.TempSensor)
  size_t total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional float value = 2;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TempSensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.TempSensor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TempSensor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TempSensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.TempSensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.TempSensor)
    UnsafeMergeFrom(*source);
  }
}

void TempSensor::MergeFrom(const TempSensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.TempSensor)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TempSensor::UnsafeMergeFrom(const TempSensor& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void TempSensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.TempSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TempSensor::CopyFrom(const TempSensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.TempSensor)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TempSensor::IsInitialized() const {

  return true;
}

void TempSensor::Swap(TempSensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TempSensor::InternalSwap(TempSensor* other) {
  std::swap(id_, other->id_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TempSensor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TempSensor_descriptor_;
  metadata.reflection = TempSensor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TempSensor

// optional int32 id = 1;
void TempSensor::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 TempSensor::id() const {
  // @@protoc_insertion_point(field_get:common.TempSensor.id)
  return id_;
}
void TempSensor::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:common.TempSensor.id)
}

// optional float value = 2;
void TempSensor::clear_value() {
  value_ = 0;
}
float TempSensor::value() const {
  // @@protoc_insertion_point(field_get:common.TempSensor.value)
  return value_;
}
void TempSensor::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:common.TempSensor.value)
}

inline const TempSensor* TempSensor::internal_default_instance() {
  return &TempSensor_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PressureSensor::kIdFieldNumber;
const int PressureSensor::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PressureSensor::PressureSensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_common_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.PressureSensor)
}

void PressureSensor::InitAsDefaultInstance() {
}

PressureSensor::PressureSensor(const PressureSensor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.PressureSensor)
}

void PressureSensor::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&id_) + sizeof(value_));
  _cached_size_ = 0;
}

PressureSensor::~PressureSensor() {
  // @@protoc_insertion_point(destructor:common.PressureSensor)
  SharedDtor();
}

void PressureSensor::SharedDtor() {
}

void PressureSensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PressureSensor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PressureSensor_descriptor_;
}

const PressureSensor& PressureSensor::default_instance() {
  protobuf_InitDefaults_common_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PressureSensor> PressureSensor_default_instance_;

PressureSensor* PressureSensor::New(::google::protobuf::Arena* arena) const {
  PressureSensor* n = new PressureSensor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PressureSensor::Clear() {
// @@protoc_insertion_point(message_clear_start:common.PressureSensor)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PressureSensor, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PressureSensor*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, value_);

#undef ZR_HELPER_
#undef ZR_

}

bool PressureSensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.PressureSensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_value;
        break;
      }

      // optional float value = 2;
      case 2: {
        if (tag == 21) {
         parse_value:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.PressureSensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.PressureSensor)
  return false;
#undef DO_
}

void PressureSensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.PressureSensor)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional float value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:common.PressureSensor)
}

::google::protobuf::uint8* PressureSensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:common.PressureSensor)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional float value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:common.PressureSensor)
  return target;
}

size_t PressureSensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.PressureSensor)
  size_t total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional float value = 2;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PressureSensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.PressureSensor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PressureSensor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PressureSensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.PressureSensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.PressureSensor)
    UnsafeMergeFrom(*source);
  }
}

void PressureSensor::MergeFrom(const PressureSensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.PressureSensor)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PressureSensor::UnsafeMergeFrom(const PressureSensor& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void PressureSensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.PressureSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PressureSensor::CopyFrom(const PressureSensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.PressureSensor)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PressureSensor::IsInitialized() const {

  return true;
}

void PressureSensor::Swap(PressureSensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PressureSensor::InternalSwap(PressureSensor* other) {
  std::swap(id_, other->id_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PressureSensor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PressureSensor_descriptor_;
  metadata.reflection = PressureSensor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PressureSensor

// optional int32 id = 1;
void PressureSensor::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 PressureSensor::id() const {
  // @@protoc_insertion_point(field_get:common.PressureSensor.id)
  return id_;
}
void PressureSensor::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:common.PressureSensor.id)
}

// optional float value = 2;
void PressureSensor::clear_value() {
  value_ = 0;
}
float PressureSensor::value() const {
  // @@protoc_insertion_point(field_get:common.PressureSensor.value)
  return value_;
}
void PressureSensor::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:common.PressureSensor.value)
}

inline const PressureSensor* PressureSensor::internal_default_instance() {
  return &PressureSensor_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace common

// @@protoc_insertion_point(global_scope)
